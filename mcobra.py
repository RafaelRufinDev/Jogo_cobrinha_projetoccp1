from Bytes_Universe_Game_Engine_V1 import Window
import pygame as pg 
import random
import time



class Snake_Game:
    def __init__(self):
        # cores do jogo
        self.color = {
            'black': (  0,   0,   0),
            'gray':  (150, 150, 150),
            'white': (255, 255, 255),
            'red':   (255,   0,   0),
            'green': (  0, 255,   0),
            'blue':  (  0,   0, 255)
        }

        # fonte do contador de pontuação
        pg.font.init()
        self.font = pg.font.SysFont("Courier New", 50, bold=True)

        # mapa do jogo

        self.map_size = (53, 30)
        self.map = [['','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',''],
                    ['','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',''],
                    ['','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',''],
                    ['','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',''],
                    ['','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',''],
                    ['','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',''],
                    ['','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',''],
                    ['','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',''],
                    ['','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',''],
                    ['','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',''],
                    ['','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',''],
                    ['','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',''],
                    ['','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',''],
                    ['','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',''],
                    ['','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',''],
                    ['','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',''],
                    ['','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',''],
                    ['','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',''],
                    ['','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',''],
                    ['','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',''],
                    ['','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',''],
                    ['','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',''],
                    ['','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',''],
                    ['','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',''],
                    ['','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',''],
                    ['','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',''],
                    ['','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',''],
                    ['','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',''],
                    ['','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',''],
                    ['','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','']]
        #posições iniciais da cobra e da maçã
        self.apple_position = (10, 10)
        self.snake_position = [(41, 20), (41, 21), (41, 22), (41, 23), (42, 23), (43, 23)]
        self.snake_direction = (-1, 0)
        self.score = 0
        self.countdown = 3
        self.end_game = False
        self.key_pressed = False
        self.key_pressed_log = ''


    def snake_change_direction(self, key):
        #verifica se a tecla pressionada é diferente da direção atual
        if (key == 'w' or key == 'up') and self.snake_direction != (0, 1):
            self.snake_direction = (0, -1)
        elif (key == 'a' or key == 'left') and self.snake_direction != (1, 0):
            self.snake_direction = (-1, 0)
        elif (key == 's' or key == 'down') and self.snake_direction != (0, -1):
            self.snake_direction = (0, 1)
        elif (key == 'd' or key == 'right') and self.snake_direction != (-1, 0):
            self.snake_direction = (1, 0)

    def game_start_countdown(self, window):
        #desenho de um círculo na tela
        pg.draw.circle(window, self.color['white'], (636, 360), 50)

        # texto desenhado ao centro do círculo, contador
        if self.countdown == 3:
            countdown_text = self.font.render('3', True, self.color['black'])
            window.blit(countdown_text, (620, 336))
            self.countdown -= 1
        elif self.countdown == 2:
            countdown_text = self.font.render('2', True, self.color['black'])
            window.blit(countdown_text, (620, 336))
            self.countdown -= 1
        elif self.countdown == 1:
            countdown_text = self.font.render('1', True, self.color['black'])
            window.blit(countdown_text, (620, 336))
            self.countdown -= 1
        elif self.countdown == 0:
            countdown_text = self.font.render('Go!', True, self.color['black'])
            window.blit(countdown_text, (595, 336))
            self.countdown -= 1

        pg.display.update()
        time.sleep(1)

    def draw_map_elements(self, window):
        # tamanho do quadrado(cada bloco)
        side = window.get_height() / self.map_size[1]

        # loop para encontrar elementos no mapa
        for y in range(self.map_size[1]):
            for x in range(self.map_size[0]):
                #desenho da posição da cobra
                if self.map[y][x] == 's':
                    pg.draw.rect(window, self.color['green'], (x * side , y * side, side, side))
